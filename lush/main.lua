---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dc.
--- DateTime: 2020-02-29 1:46 p.m.
---

Lush._loaded = {}
function include(args)
    function loader(name)
        name = name:gsub('/', '_')
        name = 'lush_'..name
        if not Lush._loaded[name] then
            Lush._loaded[name] = Lush:load(name)
        end
        return Lush._loaded[name]
    end

    if type(args) == 'string' then
        return loader(args)
    elseif type(args) == 'table' then
        local rets = {}
        for _,v in ipairs(args) do
            rets[#rets + 1] = loader(v)
        end
        return table.unpack(rets)
    else
        error("un-supported parameter of type '"..type(args).."'")
    end
end

function import(name)
    if type(name) ~= 'string' then
        error("invalid import parameter type, only string's allowed")
    end
    local func = include(name)
    return func()
end

--- import utility functions
import('sys/utils')
import('sys/show')

--- Clean up some macro's
Lush.SRC_CLEAN = cleanString(Lush.SRC)
Lush.PWD_CLEAN = cleanString(Lush.PWD)

--- Setup Logging which is needed for printing to console
local Logger,Exts = import('sys/logger')
-- initialize a default global system logger
local fanout = Exts.Fanout({
    consoleLogger = Exts.Console {
        level = Logger.INFO
    }
})
Log = Logger {
    sink = fanout,
    level = Logger.TRACE0
}

--- a script or argument has to be provided to lush
if not arg[0] then
    show();
    Lush:exit(-1);
end

--- if the next argument is an option for lush binary, then show
--- the output from lush
local arg0 = arg[0]
if arg0:sub(1, 1) == '-' then
    if show(arg0) then
        Lush:exit(0)
    else
        Lush:exit(-1)
    end
end

--- Lush temporary directory
TEMPDIR='/tmp/lush'
--- list of temporary directory used as defualts
Dirs = {
    SHELL   = 'sh',
    LOGS    = 'logs'
}

--- Create the temporary directories
for name,dir in pairs(Dirs) do
    Dirs[name] = TEMPDIR..'/'..dir
    os.execute('mkdir -p '..Dirs[name])
end


function Start(script)
    -- load the script and try executing it
    dofile(script)
end

--- start execution
local ok,msg = pcall(Start, arg0)
os.execute('rm -rf '..Dirs.SHELL..'/*')

--- finish execution, dump stack trace if there is an error
if not ok then
    io.stderr:write(msg..'\n')
    io.stderr:write(debug.traceback()..'\n')
    Lush:exit(1)
end